import LogoAPI from '../API/apiLogo';
import { getFullLogoUrl } from './logoUtils';
import { parseColorParam as parseColor } from './colorUtils';

/**
 * T√¨m logo URL d·ª±a tr√™n logo code, tr·∫£ v·ªÅ default n·∫øu kh√¥ng t√¨m th·∫•y
 * @param {string} logoCode - M√£ logo c·∫ßn t√¨m
 * @param {string} teamType - 'A' ho·∫∑c 'B' ƒë·ªÉ x√°c ƒë·ªãnh default logo
 * @returns {Promise<string>} - URL c·ªßa logo ho·∫∑c default logo
 */
export const findLogoByCode = async (logoCode, teamType = 'A') => {
  // Default logos
  const defaultLogos = {
    A: '/images/background-poster/default_logoA.png',
    B: '/images/background-poster/default_logoB.png'
  };

  if (!logoCode || logoCode.trim().length === 0) {
    console.log(`‚ÑπÔ∏è [dynamicRouteUtils] No logo code provided, using default for team ${teamType}`);
    return defaultLogos[teamType] || defaultLogos.A;
  }

  try {
    console.log(`üîç [dynamicRouteUtils] Searching for logo with code: ${logoCode}`);
    const response = await LogoAPI.searchLogosByCode(logoCode.trim(), true);

    if (response?.data?.length > 0) {
      const foundLogo = response.data[0];
      const logoUrl = getFullLogoUrl(foundLogo.url_logo || foundLogo.file_path);
      console.log(`‚úÖ [dynamicRouteUtils] Found logo for code ${logoCode}:`, logoUrl);
      return logoUrl;
    } else {
      console.log(`‚ö†Ô∏è [dynamicRouteUtils] No logo found for code: ${logoCode}, using default for team ${teamType}`);
      return defaultLogos[teamType] || defaultLogos.A;
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è [dynamicRouteUtils] Error finding logo for code ${logoCode}, using default for team ${teamType}:`, error.message);
    return defaultLogos[teamType] || defaultLogos.A;
  }
};

/**
 * T√¨m c·∫£ hai logo ƒë·ªôi d·ª±a tr√™n code
 * @param {string} teamALogoCode - M√£ logo ƒë·ªôi A
 * @param {string} teamBLogoCode - M√£ logo ƒë·ªôi B
 * @returns {Promise<{teamALogo: string|null, teamBLogo: string|null}>}
 */
export const findTeamLogos = async (teamALogoCode, teamBLogoCode) => {
  const [teamALogo, teamBLogo] = await Promise.all([
    findLogoByCode(teamALogoCode),
    findLogoByCode(teamBLogoCode)
  ]);

  return {
    teamALogo,
    teamBLogo
  };
};

/**
 * Validate v√† parse m√†u hex t·ª´ URL parameter
 * @param {string} colorParam - Tham s·ªë m√†u t·ª´ URL (kh√¥ng c√≥ #)
 * @returns {string} - M√†u hex h·ª£p l·ªá c√≥ d·∫•u #
 */
export const parseColorParam = (colorParam) => {
  if (!colorParam) return '#000000';
  
  // Lo·∫°i b·ªè # n·∫øu c√≥
  const cleanColor = colorParam.replace('#', '');
  
  // Ki·ªÉm tra format hex h·ª£p l·ªá (3 ho·∫∑c 6 k√Ω t·ª±)
  const hexPattern = /^[0-9A-Fa-f]{3}$|^[0-9A-Fa-f]{6}$/;
  
  if (hexPattern.test(cleanColor)) {
    return `#${cleanColor}`;
  }
  
  // Tr·∫£ v·ªÅ m√†u m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng h·ª£p l·ªá
  return '#000000';
};

/**
 * Parse t√™n ƒë·ªôi t·ª´ URL parameter
 * @param {string} teamNameParam - Tham s·ªë t√™n ƒë·ªôi t·ª´ URL
 * @param {string} defaultName - T√™n m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
 * @returns {string} - T√™n ƒë·ªôi ƒë√£ decode
 */
export const parseTeamName = (teamNameParam, defaultName = 'ƒê·ªòI') => {
  if (!teamNameParam) return defaultName;
  
  try {
    return decodeURIComponent(teamNameParam.replace(/_/g, ' '));
  } catch (error) {
    console.warn('Failed to decode team name:', teamNameParam, error);
    return teamNameParam.replace(/_/g, ' ') || defaultName;
  }
};

/**
 * Parse text t·ª´ URL parameter
 * @param {string} textParam - Tham s·ªë text t·ª´ URL
 * @returns {string} - Text ƒë√£ decode
 */
export const parseTextParam = (textParam) => {
  if (!textParam) return '';
  
  try {
    return decodeURIComponent(textParam.replace(/_/g, ' '));
  } catch (error) {
    console.warn('Failed to decode text param:', textParam, error);
    return textParam.replace(/_/g, ' ') || '';
  }
};

/**
 * Parse s·ªë t·ª´ URL parameter
 * @param {string} numberParam - Tham s·ªë s·ªë t·ª´ URL
 * @param {number} defaultValue - Gi√° tr·ªã m·∫∑c ƒë·ªãnh
 * @returns {number} - S·ªë ƒë√£ parse
 */
export const parseNumberParam = (numberParam, defaultValue = 0) => {
  if (!numberParam) return defaultValue;
  
  const parsed = parseInt(numberParam, 10);
  return isNaN(parsed) ? defaultValue : parsed;
};

/**
 * T·∫°o URL dynamic route t·ª´ c√°c tham s·ªë
 * @param {Object} params - C√°c tham s·ªë
 * @returns {string} - URL dynamic route
 */
export const buildDynamicRoute = (params) => {
  const {
    accessCode,
    location = 'stadium',
    matchTitle = 'match',
    liveText = 'live',
    teamALogoCode = 'TEAMA',
    teamBLogoCode = 'TEAMB',
    teamAName = 'TEAM_A',
    teamBName = 'TEAM_B',
    teamAKitColor = 'FF0000',
    teamBKitColor = '0000FF',
    teamAScore = 0,
    teamBScore = 0
  } = params;

  // Encode c√°c tham s·ªë text
  const encodedLocation = encodeURIComponent(location.replace(/ /g, '_'));
  const encodedMatchTitle = encodeURIComponent(matchTitle.replace(/ /g, '_'));
  const encodedLiveText = encodeURIComponent(liveText.replace(/ /g, '_'));
  const encodedTeamAName = encodeURIComponent(teamAName.replace(/ /g, '_'));
  const encodedTeamBName = encodeURIComponent(teamBName.replace(/ /g, '_'));

  // Lo·∫°i b·ªè # kh·ªèi m√†u
  const cleanTeamAColor = teamAKitColor.replace('#', '');
  const cleanTeamBColor = teamBKitColor.replace('#', '');

  return `/${accessCode}/${encodedLocation}/${encodedMatchTitle}/${encodedLiveText}/${teamALogoCode}/${teamBLogoCode}/${encodedTeamAName}/${encodedTeamBName}/${cleanTeamAColor}/${cleanTeamBColor}/${teamAScore}/${teamBScore}`;
};

export default {
  findLogoByCode,
  findTeamLogos,
  parseColorParam,
  parseTeamName,
  parseTextParam,
  parseNumberParam,
  buildDynamicRoute
};
