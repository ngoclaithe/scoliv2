/**
 * URL encoding utilities ƒë·ªÉ x·ª≠ l√Ω c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong URL
 * ƒê·∫∑c bi·ªát x·ª≠ l√Ω matchTitle c√≥ d·∫•u "/"
 */

// Mapping cho c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
const SPECIAL_CHAR_MAPPING = {
  // Encode
  '/': '___SLASH___',
  '\\': '___BACKSLASH___',
  '?': '___QUESTION___',
  '#': '___HASH___',
  '&': '___AMP___',
  '=': '___EQUALS___',
  '+': '___PLUS___',
  '%': '___PERCENT___',
  
  // Reverse mapping
  '___SLASH___': '/',
  '___BACKSLASH___': '\\',
  '___QUESTION___': '?',
  '___HASH___': '#',
  '___AMP___': '&',
  '___EQUALS___': '=',
  '___PLUS___': '+',
  '___PERCENT___': '%'
};

/**
 * Encode matchTitle ƒë·ªÉ an to√†n cho URL
 * @param {string} matchTitle - Match title g·ªëc
 * @returns {string} - Match title ƒë√£ encode
 */
export const encodeMatchTitle = (matchTitle) => {
  if (!matchTitle) return '';
  
  let encoded = matchTitle;
  
  // Thay th·∫ø c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
  Object.keys(SPECIAL_CHAR_MAPPING).forEach(char => {
    if (char.length < 5) { // Ch·ªâ encode, kh√¥ng decode
      const placeholder = SPECIAL_CHAR_MAPPING[char];
      encoded = encoded.replace(new RegExp(escapeRegExp(char), 'g'), placeholder);
    }
  });
  
  // Thay th·∫ø space b·∫±ng underscore
  encoded = encoded.replace(/ /g, '_');
  
  // URI encode cu·ªëi c√πng
  encoded = encodeURIComponent(encoded);
  
  console.log(`üîí [urlEncoding] Encoded matchTitle: "${matchTitle}" -> "${encoded}"`);
  return encoded;
};

/**
 * Decode matchTitle t·ª´ URL
 * @param {string} encodedMatchTitle - Match title ƒë√£ encode
 * @returns {string} - Match title g·ªëc
 */
export const decodeMatchTitle = (encodedMatchTitle) => {
  if (!encodedMatchTitle) return '';
  
  let decoded = encodedMatchTitle;
  
  try {
    // URI decode tr∆∞·ªõc
    decoded = decodeURIComponent(decoded);
  } catch (error) {
    console.warn('‚ö†Ô∏è [urlEncoding] Failed to URI decode, using as-is:', encodedMatchTitle);
  }
  
  // Thay th·∫ø placeholder b·∫±ng k√Ω t·ª± g·ªëc
  Object.keys(SPECIAL_CHAR_MAPPING).forEach(placeholder => {
    if (placeholder.length > 5) { // Ch·ªâ decode placeholder
      const originalChar = SPECIAL_CHAR_MAPPING[placeholder];
      decoded = decoded.replace(new RegExp(escapeRegExp(placeholder), 'g'), originalChar);
    }
  });
  
  // Thay th·∫ø underscore b·∫±ng space
  decoded = decoded.replace(/_/g, ' ');
  
  console.log(`üîì [urlEncoding] Decoded matchTitle: "${encodedMatchTitle}" -> "${decoded}"`);
  return decoded;
};

/**
 * Encode text parameter chung
 * @param {string} text - Text c·∫ßn encode
 * @returns {string} - Text ƒë√£ encode
 */
export const encodeTextParam = (text) => {
  if (!text) return '';
  
  let encoded = text;
  
  // Thay th·∫ø c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát c∆° b·∫£n
  encoded = encoded.replace(/\//g, '___SLASH___');
  encoded = encoded.replace(/ /g, '_');
  
  // URI encode
  encoded = encodeURIComponent(encoded);
  
  return encoded;
};

/**
 * Decode text parameter chung
 * @param {string} encodedText - Text ƒë√£ encode
 * @returns {string} - Text g·ªëc
 */
export const decodeTextParam = (encodedText) => {
  if (!encodedText) return '';
  
  let decoded = encodedText;
  
  try {
    // URI decode
    decoded = decodeURIComponent(decoded);
  } catch (error) {
    console.warn('‚ö†Ô∏è [urlEncoding] Failed to URI decode text param:', encodedText);
  }
  
  // Thay th·∫ø placeholder
  decoded = decoded.replace(/___SLASH___/g, '/');
  decoded = decoded.replace(/_/g, ' ');
  
  return decoded;
};

/**
 * Escape special characters for RegExp
 * @param {string} string - String c·∫ßn escape
 * @returns {string} - String ƒë√£ escape
 */
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

/**
 * Ki·ªÉm tra xem string c√≥ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng
 * @param {string} text - Text c·∫ßn ki·ªÉm tra
 * @returns {boolean} - True n·∫øu c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát
 */
export const hasSpecialChars = (text) => {
  if (!text) return false;
  
  const specialChars = ['/', '\\', '?', '#', '&', '=', '+', '%'];
  return specialChars.some(char => text.includes(char));
};

/**
 * T·∫°o match title an to√†n cho URL (kh√¥ng c√≥ k√Ω t·ª± ƒë·∫∑c bi·ªát)
 * @param {string} matchTitle - Match title g·ªëc
 * @returns {string} - Match title an to√†n
 */
export const createSafeMatchTitle = (matchTitle) => {
  if (!matchTitle) return 'untitled-match';
  
  let safe = matchTitle
    .replace(/[/\\?#&=+%]/g, '-') // Thay th·∫ø k√Ω t·ª± ƒë·∫∑c bi·ªát b·∫±ng d·∫•u g·∫°ch ngang
    .replace(/\s+/g, '-') // Thay th·∫ø space b·∫±ng d·∫•u g·∫°ch ngang
    .replace(/-+/g, '-') // G·ªôp nhi·ªÅu d·∫•u g·∫°ch ngang th√†nh m·ªôt
    .replace(/^-|-$/g, '') // X√≥a d·∫•u g·∫°ch ngang ·ªü ƒë·∫ßu v√† cu·ªëi
    .toLowerCase();
  
  return safe || 'untitled-match';
};

export default {
  encodeMatchTitle,
  decodeMatchTitle,
  encodeTextParam,
  decodeTextParam,
  hasSpecialChars,
  createSafeMatchTitle,
  SPECIAL_CHAR_MAPPING
};
